apply plugin: 'idea'

idea {
    workspace {
        iws.withXml { provider ->
            def node = provider.asNode()
            def runManager = node.component.find { it.'@name' == 'RunManager' }

            def defaultJUnitConf = runManager.configuration.find { it.'@default' == 'true' && it.'@type' == 'JUnit' }

            defaultJUnitConf.method.replaceNode {
                method {
                    option(
                            name: "Gradle.BeforeRunTask",
                            enabled: true,
                            tasks: "classes pluginUnderTestMetadata processTestResources",
                            externalProjectPath: '$PROJECT_DIR$/build.gradle'
                    )
                    option(name: "Make", enabled: true)
                }
            }
        }
    }

    project {
        vcs = 'Git'

        ipr.withXml { provider ->
            def node = provider.asNode()
            ["codeStyle", "gradle"].each {
                node.append(new XmlParser().parse(file("gradle/idea/${it}.xml")))
            }

            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.@default = "ASL2"
            def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "ASL2" }
            if (aslCopyright == null) {
                copyrightManager.append(new XmlParser().parseText("""
                        <copyright>
                            <option name="notice" value="Copyright \$today.year the original author or authors.&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;	  http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
                            <option name="keyword" value="Copyright" />
                            <option name="allowReplaceKeyword" value="Do not allow replacing" />
                            <option name="myName" value="ASL2" />
                            <option name="myLocal" value="true" />
                        </copyright>
                    """))
                def templateLanguageOptions = copyrightManager.LanguageOptions.find { it.'@name' == '__TEMPLATE__' }
                if (templateLanguageOptions == null) {
                    copyrightManager.append(new XmlParser().parseText("""
                            <LanguageOptions name="__TEMPLATE__">
                                <option name="addBlankAfter" value="false" />
                            </LanguageOptions>
                        """))
                } else {
                    templateLanguageOptions.option.find { it.'@name' == 'addBlankAfter' }.@value = false
                }
            }
        }
    }
}